{"version":3,"sources":["Utilities/utilities.js","Components/AddThoughtForm.js","Components/Thought.js","Components/App.js","reportWebVitals.js","index.js"],"names":["getNewExpirationTime","Date","now","nextId","generateId","result","AddThoughtForm","props","useState","text","setText","className","onSubmit","event","preventDefault","thought","id","expiresAt","length","addThought","type","placeholder","value","onChange","target","Thought","removeThought","useEffect","timeRemaining","timeout","setTimeout","clearTimeout","onClick","App","thoughts","setThoughts","thoughtIdToRemove","prev","filter","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAAO,SAASA,IACZ,OAAOC,KAAKC,MAAQ,IAGxB,IAAIC,EAAS,EAEN,SAASC,IACZ,IAAMC,EAASF,EAEf,OADAA,GAAU,EACHE,E,WCNJ,SAASC,EAAeC,GAC3B,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAqBA,OACI,uBAAMC,UAAU,iBAAiBC,SAhBhB,SAAAC,GACjBA,EAAMC,iBAEN,IAAMC,EAAU,CACZC,GAAIZ,IACJK,KAAMA,EACNQ,UAAWjB,KAGXS,EAAKS,OAAS,IACdX,EAAMY,WAAWJ,GACjBL,EAAQ,MAKZ,UACI,uBACIU,KAAK,OACL,aAAW,uBACXC,YAAY,uBACZC,MAAOb,EACPc,SA1Ba,SAAAV,GACrBH,EAAQG,EAAMW,OAAOF,UA2BjB,uBACIF,KAAK,SACLE,MAAM,WClCf,SAASG,EAAQlB,GACpB,IAAQQ,EAA2BR,EAA3BQ,QAASW,EAAkBnB,EAAlBmB,cAgBjB,OAVAC,qBAAU,WACN,IAAMC,EAAgBb,EAAQE,UAAYhB,KAAKC,MAEzC2B,EAAUC,YAAW,WACvBJ,EAAcX,EAAQC,MACvBY,GAEH,OAAO,kBAAMG,aAAaF,MAC3B,CAACd,IAGA,qBAAIJ,UAAU,UAAd,UACI,wBACI,aAAW,iBACXA,UAAU,gBACVqB,QAnBc,WACtBN,EAAcX,EAAQC,KAelB,kBAOA,qBAAKL,UAAU,OAAf,SAAuBI,EAAQN,UCkB5BwB,MAzCf,WACE,MAAgCzB,mBAAS,CACvC,CACEQ,GAAIZ,IACJK,KAAM,6CACNQ,UAAWjB,KAEb,CACEgB,GAAIZ,IACJK,KAAM,uCACNQ,UAAWjB,OATf,mBAAOkC,EAAP,KAAiBC,EAAjB,KAeMT,EAAgB,SAAAU,GACpBD,GAAY,SAAAE,GAAI,OAAIA,EAAKC,QAAO,SAAAvB,GAAO,OAAIA,EAAQC,KAAOoB,SAG5D,OACE,sBAAKzB,UAAU,MAAf,UACE,iCACE,oDAEF,iCACE,cAACL,EAAD,CAAgBa,WAZH,SAAAJ,GAAO,OAAIoB,GAAY,SAAAE,GAAI,OAAKtB,GAAL,mBAAiBsB,UAazD,oBAAI1B,UAAU,WAAd,SACGuB,EAASK,KAAI,SAACxB,GAAD,OACZ,cAACU,EAAD,CAEEV,QAASA,EACTW,cAAeA,GAFVX,EAAQC,gBCvBZwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.004c324b.chunk.js","sourcesContent":["export function getNewExpirationTime() {\n    return Date.now() + 5 * 1000;\n}\n\nlet nextId = 0;\n\nexport function generateId() {\n    const result = nextId;\n    nextId += 1;\n    return result;\n}","import React, { useState } from 'react';\nimport { generateId, getNewExpirationTime } from '../Utilities/utilities';\n\nexport function AddThoughtForm(props) {\n    const [text, setText] = useState(\"\");\n\n    const handleTextChange = event => {\n        setText(event.target.value);\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const thought = {\n            id: generateId(),\n            text: text,\n            expiresAt: getNewExpirationTime()\n        };\n\n        if (text.length > 0) {\n            props.addThought(thought);\n            setText(\"\");\n        }\n    }\n\n    return (\n        <form className=\"AddThoughtForm\" onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                aria-label=\"What's on your mind?\"\n                placeholder=\"What's on your mind?\"\n                value={text}\n                onChange={handleTextChange}\n            />\n            <input \n                type=\"submit\" \n                value=\"Add\" \n            />\n        </form>\n    );\n}\n","import React, { useEffect } from 'react';\n\nexport function Thought(props) {\n    const { thought, removeThought } = props;\n\n    const handleRemoveClick = () => {\n        removeThought(thought.id);\n    };\n\n    useEffect(() => {\n        const timeRemaining = thought.expiresAt - Date.now();\n\n        const timeout = setTimeout(() => {\n            removeThought(thought.id);\n        }, timeRemaining);\n\n        return () => clearTimeout(timeout);\n    }, [thought]);\n\n    return (\n        <li className=\"Thought\">\n            <button\n                aria-label=\"Remove thought\"\n                className=\"remove-button\"\n                onClick={handleRemoveClick}\n            >\n                &times;\n            </button>\n            <div className=\"text\">{thought.text}</div>\n        </li>\n    );\n}\n","import React, { useState } from 'react';\nimport { AddThoughtForm } from './AddThoughtForm';\nimport { Thought } from './Thought';\nimport { generateId, getNewExpirationTime } from '../Utilities/utilities';\n\nfunction App() {\n  const [thoughts, setThoughts] = useState([\n    {\n      id: generateId(),\n      text: 'This is a place for your passing thoughts.',\n      expiresAt: getNewExpirationTime(),\n    },\n    {\n      id: generateId(),\n      text: \"They'll be removed after 15 seconds.\",\n      expiresAt: getNewExpirationTime(),\n    },\n  ]);\n\n  const addThought = thought => setThoughts(prev => [thought, ...prev]);\n\n  const removeThought = thoughtIdToRemove => { \n    setThoughts(prev => prev.filter(thought => thought.id !== thoughtIdToRemove));\n  } \n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Passing Thoughts</h1>\n      </header>\n      <main>\n        <AddThoughtForm addThought={addThought}/>\n        <ul className=\"thoughts\">\n          {thoughts.map((thought) => (\n            <Thought \n              key={thought.id}\n              thought={thought}\n              removeThought={removeThought}\n            />\n          ))}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}